/*!
*******************************************************************************
\file safe.h
\brief Регулярные вычисления
*//****************************************************************************
\author (С) Сергей Агиевич, http://apmi.bsu.by
\created 2013.10.07
\version 2014.10.21
*******************************************************************************
*/

#ifndef __SAFE_H
#define __SAFE_H

#include "defs.h"

#ifdef __cplusplus
extern "C" {
#endif


/*!
*******************************************************************************
\file safe.h

Если в криптографических программах имеются условные переходы и условия этих 
переходов определяются обрабатываемыми данными (но не их размерностями), 
то эти программы подвержены атакам, основанным на замерах времени или питания.
Даже если условных переходов нет, флуктуации времени выполнения могут быть 
индуцированы различными задержками при загрузке данных из массивов в связи с
логикой работы кэш-памяти современных процессоров.

Регулярные вычисления -- это "равномерные" вычисления, всегда одни и те же 
при обработке различных данных определенных размерностей. 

Модуль содержит вспомогательные функции и макросы, облегчающие разработку 
регулярных программ.

Макросы регулярных сравнений основаны на трюках, описанных в
[Уоррен Генри Мл. Алгоритмические трюки для программистов, 
М.: Изательский дом <<Вильямс>>, 2003] (стр. 35).

todo: Можно ли упростить регулярные сравнения?
*******************************************************************************
*/

/*!	Машинное слово a совпадает с машинным словом b? */
#define safeWordEq(a, b)\
	(~((a) - (b) | (b) - (a)) >> (B_PER_W - 1))

/*!	Машинное слово a нулевое? */
#define safeWordIsZero(a)\
	(~(a) & ((a) - WORD_1))

/*!	Машинное слово a меньше машинного слова b? */
#define safeWordLess(a, b)\
	((~(a) & (b) | ((~(a) | (b)) & (a) - (b))) >> (B_PER_W - 1))

/*!	Машинное слово a не больше машинного слова b? */
#define safeWordLeq(a, b)\
	(((~(a) | (b)) & (((a) ^ (b)) | ~((b) - (a)))) >> (B_PER_W - 1))

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __SAFE_H */
