#include "math\qr.h"

/*
*******************************************************************************
Управление описанием поля
*******************************************************************************
*/

/*!	\brief Создание описания поля GF(2^m) в оптимальном нормальном базисе

	По описанию p многочлена p(x) создается описание f поля 
	GF(2^m). Подбирается оптимальное (с точки зрения 
	эффективности вычислений) описание поля.
	\return Признак успеха.
	\post f->n == W_OF_B(m) и f->no == O_OF_B(m).
	\keep{f} gf2Create_keep(m).
	\deep{stack} gf2Create_deep(m).
*/
bool_t gf2_onbCreate(
	qr_o* f,			/*!< [out] описание поля */
	const size_t p[4],  /*!< [in] параметр */
	void* stack			/*!< [in] вспомогательная память */
);

/*!	\brief Описание поля GF(2^m) работоспособно?

	Проверяется работоспособность описания f поля GF(2^m). Проверяются
	следующие условия:
	-	qrIsOperable(f) == TRUE;
	-	указатель f->mod корректен;
	-	указатель f->params корректен;
	-	f->params указывает на массив [4]p;
	-	последнее слово f->mod ненулевое;
	-	f->n == W_OF_B(m);
	-	f->no == O_OF_B(m).
	.
	\return Признак работоспособности.
*/
bool_t gf2_onbIsOperable(
	const qr_o* f		/*!< [in] описание поля */
);

/*!	\brief Степень расширения поля GF(2^m)

	Определяется степень расширения m поля f = GF(2^m).
	\pre Описание f работоспособно.
	\return Степень расширения.
*/
size_t gf2_onbDeg(
	const qr_o* f		/*!< [in] описание поля */
);

/*
*******************************************************************************
Псевдонимы

Для ускорения работы вместо обращения к функциям интерфейса qr_add_i, 
qr_sub_i, qr_neg_i идут прямые обращения к wordXor(), wordXor2(), wordCopy().
*******************************************************************************
*/

#define gf2_onbAdd(c, a, b, f)\
	wordXor(c, a, b, (f)->n)

#define gf2_onbAdd2(b, a, f)\
	wordXor2(b, a, (f)->n)

#define gf2_onbSub(c, a, b, f)\
	wordXor(c, a, b, (f)->n)

#define gf2_onbSub2(b, a, f)\
	wordXor2(b, a, (f)->n)

#define gf2_onbNeg(b, a, f)\
	wordCopy(b, a, (f)->n)